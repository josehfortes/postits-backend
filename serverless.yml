org: josefortes
app: postits
service: backend
frameworkVersion: '2'

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true

functions:
  createAccount:
    handler: src/modules/user/controller.createAccount
    events:
    - http:
        path: user/create
        method: post
        cors: true
        request:
          schema:
            application/json: {
              "type": "object",
              "required": ["firstName", "lastName", "email", "password"]
            }
  login:
    handler: src/modules/user/controller.login
    events:
    - http:
        path: user
        method: post
        cors: true
        request:
          schema:
            application/json: {
              "type": "object",
              "required": ["email", "password"]
            }
  authorizer:
    handler: src/modules/user/controller.authorizer
  createBoard:
    handler: src/modules/board/controller.create
    events:
    - http:
        path: board
        method: post
        cors: true
        authorizer: authorizer
        request:
          schema:
            application/json: {
              "type": "object",
              "required": ["name"]
            }
  listBoards:
    handler: src/modules/board/controller.listAll
    events:
    - http:
        path: board/all
        method: get
        cors: true
        authorizer: authorizer
  getBoard:
    handler: src/modules/board/controller.get
    events:
    - http:
        path: board
        method: get
        cors: true
        authorizer: authorizer
  updateboard:
    handler: src/modules/board/controller.put
    events:
    - http:
        path: board
        method: put
        cors: true
        authorizer: authorizer
  deleteBoard:
    handler: src/modules/board/controller.deleteController
    events:
    - http:
        path: board
        method: delete
        cors: true
        authorizer: authorizer

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
